{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","components/Footer.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","constants.js","components/WorldMap.js","components/Main.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","spacex_logo","alt","Component","Footer","SatSettingForm","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","style","width","placeholder","type","htmlType","textAlign","SatSetting","Form","create","SatelliteList","onChange","console","log","target","dataInfo","checked","selected","state","list","addOrRemove","setState","sat","status","found","some","item","satid","filter","onShowSatMap","onShowMap","isLoad","satList","satInfo","above","size","disabled","length","onClick","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","SAT_API_KEY","height","WorldMap","generateMap","land","projection","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","context2","path","geoPath","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","map","track","data","hasOwnProperty","Error","len","positions","observeData","duration","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","xy","color","arc","Math","PI","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","endTime","urls","url","Promise","all","results","arr","ref","Main","showNearbySatellite","setting","fetchSatellite","altitude","isLoadingList","response","error","showMap","preState","isLoadingMap","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2ace8e6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.ad25dfff.svg\";","import React, {Component} from 'react';\nimport spacex_logo from '../assets/images/spacex_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\nexport default Header;","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Zhao Tang\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React, {Component} from 'react';\nimport {Button, Form, InputNumber} from \"antd\";\n\nclass SatSettingForm extends Component {\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 11 }\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 13 }\n            }\n        };\n\n        return (\n            <Form\n                className='sat-setting'\n                {...formItemLayout}\n                onSubmit={this.showSatellite}\n            >\n                <Form.Item label=\"Longitude(degrees)\">\n                    {getFieldDecorator(\"longitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Longitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            min={-180}\n                            max={180}\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please input Longitude\"\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Latitude(degrees)\">\n                    {getFieldDecorator(\"latitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Latitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Latitude\"\n                            min={-90}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Elevation(meters)\">\n                    {getFieldDecorator(\"elevation\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Elevation\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Elevation\"\n                            min={-413}\n                            max={8850}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Altitude(degrees)\">\n                    {getFieldDecorator(\"altitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Altitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Altitude\"\n                            min={0}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Duration(secs)\">\n                    {getFieldDecorator(\"duration\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Duration\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Duration\"\n                            min={0}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item className='show-nearby'>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        style={{ textAlign: \"center\" }}\n                    >Find Nearby Satellite</Button>\n                </Form.Item>\n            </Form>\n\n        );\n    }\n\n    showSatellite = e => {\n        // Prevent default GET request\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if(!err) {\n                // console.log('values: ', values);\n                // Send settings info to Main component\n                this.props.onShow(values);\n            }\n        })\n    }\n}\n\nconst SatSetting = Form.create()(SatSettingForm);\n\nexport default SatSetting;","export default __webpack_public_path__ + \"static/media/satellite.d327b26a.svg\";","import React, {Component} from 'react';\nimport {Avatar, Button, Checkbox, List, Spin} from \"antd\";\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // Record satellite selected by the user,\n            // which are going to be rendered in the map\n            selected: [],\n            isLoad: false\n        }\n    }\n\n    onChange = e => {\n        console.log(e.target);\n        // Step 1: get dataInfo and checked status\n        const { dataInfo, checked } = e.target;\n        // Step 2: add/remove clicked satellite from the list\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        // Step 3: update the selected array\n        this.setState( {\n            selected: list\n        })\n    }\n\n    addOrRemove = (sat, status, list) => {\n        // Case 1: satellite is selected (checked is true)\n        // Case 1.1: satellite is NOT in the list. Add it to the list\n        // Case 1.2: satellite is in the list. Do noting\n        // Case 2: satellite is NOT selected (checked is false)\n        // Case 2.1: satellite is NOT in the list. Do nothing\n        // Case 2.2: satellite is in the list. Remove it\n        const found = list.some(item => item.satid === sat.satid);\n        if (status && !found) {\n            // Case 1.1\n            list = [...list, sat];\n        } else if (!status && found) {\n            // Case 2.2\n            list = list.filter(item => item.satid !== sat.satid);\n        }\n        console.log(list);\n        return list;\n    }\n\n    onShowSatMap = () => {\n        this.props.onShowMap(this.state.selected);\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n        const {isLoad} = this.props;\n        const {selected} = this.state;\n\n        return (\n            <div className=\"sat-list-box\">\n                <div className=\"btn-container\">\n                    <Button\n                        className=\"sat-list-btn\"\n                        type=\"primary\"\n                        size=\"large\"\n                        disabled={ selected.length===0 }\n                        onClick={this.onShowSatMap}\n                    >\n                        Track on the map\n                    </Button>\n                </div>\n                <hr/>\n                {isLoad ? (\n                    <div className=\"spin-box\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : (\n                    <List\n                        className=\"sat-list\"\n                        itemLayout=\"horizontal\"\n                        size=\"small\"\n                        dataSource={satList}\n                        renderItem={item => (\n                            <List.Item\n                                actions={ [\n                                    <Checkbox dataInfo={item} onChange={this.onChange} />\n                                ]}\n                            >\n                                <List.Item.Meta\n                                    avatar={<Avatar size={50} src={satellite} />}\n                                    title={<p>{item.satname}</p>}\n                                    description={`Launch Date: ${item.launchDate}`}\n                                />\n                            </List.Item>\n                        )}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default SatelliteList;","export const SAT_API_KEY = \"NGBQZ2-95EQ5Q-ZTE3F5-4NOW\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport {Spin} from \"antd\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { feature } from \"topojson-client\"\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { select as d3Select } from \"d3-selection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDrawing: false\n        }\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then( res => {\n                // console.log(res);\n                // Get raw data from http response\n                const { data } = res;\n                // Draw the map\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch( err => {\n                console.log(\"Error in fetching world map data: \", err);\n            })\n    }\n\n    generateMap = land => {\n        // Create map projection to receive geo data\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width/2, height/2])\n            .precision(.1);\n\n        // Get latitude and longitude lines\n        const graticule = geoGraticule();\n\n        // Get map canvas\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        // Get track canvas\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath().projection(projection).context(context);\n\n        // data <=> map\n        land.forEach( ele => {\n            context.fillStyle = \"#B3DDEF\";\n            context.strokeStyle = \"#000\";\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n\n        this.map = {\n            context: context,\n            context2: context2,\n            projection: projection\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // Fetch satellite position data\n        // Update the map only then the sat data have changed\n        if(prevProps.satData !== this.props.satData) {\n            const {\n                latitude,\n                longitude,\n                elevation,\n                duration\n            } = this.props.observeData;\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            const urls = this.props.satData.map( sat => {\n                const { satid } = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}\n                /${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                return axios.get(url);\n            })\n\n            Promise.all(urls)\n                .then( results => {\n                    // console.log(results);\n                    const arr = results.map( res => res.data);\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML = \"Please wait until selected satellites are shown...\"\n                    }\n                })\n                .catch( e => {\n                    console.log(\"Error in fetching satellite positions: \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        // Check if there is any position data\n        if (data.length === 0 || !data[0].hasOwnProperty('positions')) {\n            throw new Error(\"No position data\");\n        }\n\n        const len = data[0].positions.length;\n        const {duration} = this.props.observeData;\n        const {context2} = this.map;\n\n        let now = new Date();\n        let i = 0;\n        let timer = setInterval( () => {\n            // Get current time\n            let ct = new Date();\n            // Get passed time\n            let timePassed = i===0 ? 0 : ct-now;\n            let time = new Date(now.getTime() + 60*timePassed);\n            // Clear previous point\n            context2.clearRect(0, 0, width, height);\n            // Draw the new point\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width/2, 10);\n\n            // Terminate criteria\n            if(i >= len) {\n                clearInterval(timer);\n                this.setState({\n                    isDrawing: false\n                });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n            }\n\n            // For each satellite, begin drawing\n            data.forEach( sat => {\n                const {info, positions} = sat;\n                this.drawSat(info, positions[i]);\n            })\n            i += 60;\n        }, 1000)\n    }\n\n    drawSat = (sat, pos) => {\n        const {satlongitude, satlatitude} = pos;\n\n        if (!satlongitude || !satlatitude) {\n            return;\n        }\n\n        const {satname} = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const {projection, context2} = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2*Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1]+14);\n    };\n\n    render() {\n        const {isLoading} = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;","import React, {Component} from 'react';\nimport { Row, Col } from 'antd'\nimport axios from 'axios';\nimport SatSetting from \"./SatSetting\"\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\nimport {NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY} from \"../constants\";\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            satInfo: null,\n            setting: null,\n            satList: null,\n            isLoadingList: false\n        };\n    }\n\n    showNearbySatellite = setting => {\n        // Fetch satellite setting data\n        this.setState({\n            isLoading: true,\n            setting: setting,\n        })\n        this.fetchSatellite(setting);\n    };\n\n    fetchSatellite = setting => {\n        // Get settings\n        const { latitude, longitude, elevation, altitude } = setting;\n        // Prepare the option for HTTP request\n        const url = `api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n        // Update loading flag\n        this.setState({\n            isLoadingList: true\n        })\n\n        // Get HTTP response using axios\n        axios.get(url)\n            .then(response => {\n                console.log(\"HTTP response: \", response.data);\n                this.setState( {\n                    satInfo: response.data,\n                    isLoadingList: false\n                });\n            })\n            .catch( error => {\n                console.log(\"Error in fetching satellite data: \", error);\n            });\n    };\n\n    showMap = selected => {\n        this.setState(preState => ({\n            ...preState,\n            isLoadingMap: true,\n            satList: [...selected]\n        }));\n    };\n\n    render() {\n        const {isLoadingList, satInfo, setting, satList} = this.state;\n        return (\n            <Row className=\"main\">\n                <Col span={8} className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList\n                        satInfo={satInfo}\n                        isLoad={isLoadingList}\n                        onShowMap = {this.showMap} />\n                </Col>\n                <Col span={16} className=\"right-side\">\n                    <WorldMap observeData={setting} satData={satList}/>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default Main;","// import logo from '../assets/images/logo.svg';\n// import '../styles/App.css';\n//\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n//\n// export default App;\n\nimport React from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}